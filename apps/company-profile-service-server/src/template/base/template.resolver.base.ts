/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Template } from "./Template";
import { TemplateCountArgs } from "./TemplateCountArgs";
import { TemplateFindManyArgs } from "./TemplateFindManyArgs";
import { TemplateFindUniqueArgs } from "./TemplateFindUniqueArgs";
import { CreateTemplateArgs } from "./CreateTemplateArgs";
import { UpdateTemplateArgs } from "./UpdateTemplateArgs";
import { DeleteTemplateArgs } from "./DeleteTemplateArgs";
import { TemplateCreateInput } from "./TemplateCreateInput";
import { TemplateUpdateInput } from "./TemplateUpdateInput";
import { TemplateService } from "../template.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Template)
export class TemplateResolverBase {
  constructor(
    protected readonly service: TemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  async _templatesMeta(
    @graphql.Args() args: TemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Template])
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  async templates(
    @graphql.Args() args: TemplateFindManyArgs
  ): Promise<Template[]> {
    return this.service.templates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Template, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "own",
  })
  async template(
    @graphql.Args() args: TemplateFindUniqueArgs
  ): Promise<Template | null> {
    const result = await this.service.template(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Template)
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "create",
    possession: "any",
  })
  async createTemplate(
    @graphql.Args() args: CreateTemplateArgs
  ): Promise<Template> {
    return await this.service.createTemplate({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Template)
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async updateTemplate(
    @graphql.Args() args: UpdateTemplateArgs
  ): Promise<Template | null> {
    try {
      return await this.service.updateTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Template)
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "delete",
    possession: "any",
  })
  async deleteTemplate(
    @graphql.Args() args: DeleteTemplateArgs
  ): Promise<Template | null> {
    try {
      return await this.service.deleteTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async CustomizeTemplate(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.CustomizeTemplate(args);
  }

  @graphql.Mutation(() => String)
  async GenerateContentSuggestions(
    @graphql.Args()
    args: TemplateCreateInput
  ): Promise<string> {
    return this.service.GenerateContentSuggestions(args);
  }

  @graphql.Query(() => String)
  async GetTemplatePreview(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetTemplatePreview(args);
  }

  @graphql.Mutation(() => Template)
  async UpdateTemplateDetails(
    @graphql.Args()
    args: TemplateUpdateInput
  ): Promise<Template> {
    return this.service.UpdateTemplateDetails(args);
  }
}
